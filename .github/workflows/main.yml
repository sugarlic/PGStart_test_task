name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v2

      - name: Set up Go 1.21
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Test
        run: go test -v ./...

  build_and_deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: test

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout main
        uses: actions/checkout@v2

      - name: Setup PostgreSQL client
        run: sudo apt-get install -y postgresql-client

      - name: Create database table
        run: |
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql -h localhost -U postgres -d postgres -c "
          CREATE TABLE IF NOT EXISTS commands (
            id SERIAL PRIMARY KEY,
            title TEXT,
            content TEXT,
            exec_res TEXT
          );"

      # - name: Set up Yandex CLI and Docker
      #   uses: yc-actions/setup-yc@v2
      #   with:
      #     token: ${{ secrets.YC_TOKEN }}

      - name: Build and push container image to Yandex Cloud
        uses: yc-actions/yc-coi-deploy@v1
        with:
          folder-id: b1g49fdgkeu589f8e9np
          registry-id: your-registry-id # Replace with your actual registry ID
          image-name: my-server
          image-tag: ${{ github.sha }}
          docker-context: . # Assuming Dockerfile is in the root of the repository
          dockerfile: Dockerfile # Specify your Dockerfile if located differently
          build-args: >-
            DATABASE_URL="host=localhost port=5432 user=postgres password=${{ secrets.POSTGRES_PASSWORD }} dbname=postgres sslmode=disable"
